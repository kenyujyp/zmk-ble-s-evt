/*
 * Copyright (c) 2023 ssbb
 *
 * SPDX-License-Identifier: MIT
 */

#include "ec60ble.dtsi"

/ {
  
  chosen {
    zmk,kscan = &kscan0;
    zmk,gpio-key-wakeup-trigger = &wakeup_trigger0;
    /* zephyr,console = &uart0; */
  };

    /* &gpio0 13 -> P0.13  (ROW 0)*/
    /* &gpio0 24 -> P0.24  (ROW 1)*/
    /* &gpio0 3 -> P0.03  (ROW 2)*/
    /* &gpio1 10 -> P1.10  (ROW 3)*/
    /* &gpio1 11 -> P1.11  (ROW 4)*/

  kscan0: kscan {
    compatible = "zmk,kscan-gpio-ec";
    label = "KSCAN";

    row-gpios
    = <&gpio0 13 GPIO_ACTIVE_HIGH>
    , <&gpio0 24 GPIO_ACTIVE_HIGH>
    , <&gpio0 3 GPIO_ACTIVE_HIGH>
    , <&gpio1 10 GPIO_ACTIVE_HIGH>
    , <&gpio1 11 GPIO_ACTIVE_HIGH>
    ;

    // mux select gpios for selecting which col channel to scan
    mux-sel-gpios
    = <&gpio0 5 GPIO_ACTIVE_HIGH>
    , <&gpio0 30 GPIO_ACTIVE_HIGH>
    , <&gpio0 31 GPIO_ACTIVE_HIGH>
    ;

    // 2 multiplexer enable pins in col number ascending order
    mux-en-gpios 
    = <&gpio1 9 GPIO_ACTIVE_HIGH>
    , <&gpio0 2 GPIO_ACTIVE_HIGH>
    ;
    discharge-gpios = <&gpio0 2 GPIO_ACTIVE_HIGH>;
    col-channels = <0 2 3 1 5 4 7 6 8 10 11 9 12 13 14>;
    io-channels = <&adc 1>;
    power-gpios = <&gpio1 13 GPIO_ACTIVE_HIGH>;
  };

  gpio_keys {
    compatible = "gpio-keys";
    wakeup_button: wakeup_button {
    label = "WAKEUP_BTN";
    gpios = <&gpio1 4 GPIO_ACTIVE_HIGH>; // wake up pin GPIO1 pin 4
    };
  };

  wakeup_trigger0: gpio-key-wakeup-trigger {
    compatible = "zmk,gpio-key-wakeup-trigger";   /* Use ZMK's GPIO key wakeup driver */
    trigger = <&wakeup_button>;    /* Reference the wakeup_button node's phandle  */
    wakeup-source;    /* Mark this device as able to wake the keyboard */
  };
};

&adc {
  #address-cells = <1>;
  #size-cells = <0>;
  status = "okay";

  // EC Read
  channel@1 {
    reg = <1>;
    zephyr,gain = "ADC_GAIN_1_6";
    zephyr,reference = "ADC_REF_INTERNAL";
    zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40)>;
    zephyr,resolution = <12>;
    zephyr,input-positive = <NRF_SAADC_AIN4>; /* P0.28 */
  };

  // Battery Sensing
  channel@3 {
    reg = <3>;
    zephyr,gain = "ADC_GAIN_1_6";
    zephyr,reference = "ADC_REF_INTERNAL";
    zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40)>;
    zephyr,resolution = <12>;
    zephyr,input-positive = <NRF_SAADC_AIN5>; /* P0.29 */
  };
};

/*
 * &uart0 {
 *   status = "okay";
 *   current-speed = <115200>;
 * };
 */
