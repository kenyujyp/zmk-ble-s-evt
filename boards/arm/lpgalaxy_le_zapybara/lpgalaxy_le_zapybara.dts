/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <nordic/nrf52840_qiaa.dtsi>
#include <zephyr/dt-bindings/dt-util.h>
#include <zephyr/dt-bindings/adc/adc.h>
#include <zephyr/dt-bindings/gpio/nordic-nrf-gpio.h>
#include <dt-bindings/zmk/matrix_transform.h>
#include <freq.h>
#include <dt-bindings/gpio/gpio.h> // Required for GPIO flags
#include "lpgalaxy_le_zapybara-layout.dtsi"

&adc {
    status = "okay";

    #address-cells = <1>;
    #size-cells = <0>;

    channel@3 {
        reg = <3>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40)>;
        zephyr,resolution = <12>;
    };

    channel@1 {
        reg = <1>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 5)>;
        zephyr,resolution = <12>;
    };
};


/ {

    chosen {
        zmk,kscan = &matrix;
        zmk,physical-layout = &layout_0;
        zephyr,code-partition = &code_partition;
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
	    zerhyr,shell-uart = &cdc_acm_uart;
        zmk,battery = &vbatt; 
    };

    matrix: matrix {
        /* need to be careful with kscan compatible type, defined by driver */
		compatible = "zmk,kscan-gpio-ec";

		matrix-relax-us = <80>;
        matrix-warm-up-ms = <5>;
        active-polling-interval-ms = <1000>;   // 1s interval
        idle-polling-interval-ms = <3500>;     // 3.5s 

        io-channels = <&adc 1>;
        
        discharge-gpios = <&gpio0 2 (GPIO_ACTIVE_HIGH | NRF_GPIO_DRIVE_H0H1)>;
        //power-gpios = <&gpio1 13 (GPIO_ACTIVE_HIGH)>;

		// 2 multiplexer enable pins in col number ascending order
        mux0-en-gpios = <&gpio1 9 GPIO_ACTIVE_LOW>;

        /* mux channel select gpios, in ascending order */
        mux-sel-gpios
        = <&gpio1 13 GPIO_ACTIVE_HIGH>
        , <&gpio0 28 GPIO_ACTIVE_HIGH>
        , <&gpio0 3 GPIO_ACTIVE_HIGH>
        ;
        /* multiplexer pin number mapping to all channels from #0-15 */
        col-channels = <3 0 5 7>;
        /* row gpios, in ascending order */
        row-gpios
		= <&gpio1 11  (GPIO_ACTIVE_HIGH)>
        , <&gpio1 10 (GPIO_ACTIVE_HIGH)>
        ;
        
        /*
        row-input-masks = <
            (BIT(0) + BIT(1) + BIT(2) + BIT(3) + BIT(4) + BIT(5) + BIT(6) + BIT(7) + BIT(8) + BIT(9) + BIT(10) + BIT(11) + BIT(12) + BIT(13) + BIT(14))
            (BIT(0) + BIT(1) + BIT(2) + BIT(3) + BIT(4) + BIT(5) + BIT(6) + BIT(7) + BIT(8) + BIT(9) + BIT(10) + BIT(11) + BIT(12) + BIT(13) + BIT(14))
            (BIT(0) + BIT(1) + BIT(2) + BIT(3) + BIT(4) + BIT(5) + BIT(6) + BIT(7) + BIT(8) + BIT(9) + BIT(10) + BIT(11) + BIT(12) + BIT(13) + BIT(14))
            (BIT(0) + BIT(1) + BIT(2) + BIT(3) + BIT(4) + BIT(5) + BIT(6) + BIT(7) + BIT(8) + BIT(9) + BIT(10) + BIT(11) + BIT(12) + BIT(13) + BIT(14))
            (BIT(0) + BIT(1) + BIT(2) + BIT(3) + BIT(4) + BIT(5) + BIT(6) + BIT(7) + BIT(8) + BIT(9) + BIT(10) + BIT(11) + BIT(12) + BIT(13) + BIT(14))
        >;
        */

        row-input-masks = <
            0
            0
        >;
    };

    vbatt: vbatt {
        compatible = "zmk,battery-voltage-divider";
        io-channels = <&adc 3>;
        output-ohms = <2000000>;
        full-ohms = <(2000000 + 820000)>;
    };

    /* motion sensor interrupt */
    motion_interrupt_pin: motion_interrupt {
        compatible = "gpio-keys";
        my_pin: my_pin {
            /* no internal pull up */
            gpios = <&gpio0 10 (GPIO_ACTIVE_LOW)>;
        };
        wakeup-source;
    };

    transform: transform {
        compatible = "zmk,matrix-transform";
        rows = <2>;
        columns = <4>;

        map = <
        RC(0,2) RC(0,3) RC(0,1) RC(0,0)
        RC(1,2) RC(1,3) RC(1,1) RC(1,0)    
        >;
    };
};

zephyr_udc0: &usbd {
	status = "okay";
        cdc_acm_uart: cdc_acm_uart {
            compatible = "zephyr,cdc-acm-uart";
        };
};

&flash0 {
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        sd_partition: partition@0 {
            label = "softdevice";
            reg = <0x00000000 0x00026000>;
        };

        code_partition: partition@26000 {
            label = "code_partition";
            reg = <0x00026000 0x00046000>;
        };
        // The flash starting at 0x0006c000 and ending at
        // 0x00073fff is reserved for use by the application.
        // Storage partition will be used by FCB/LittleFS/NVS if enabled.
        storage_partition: partition@6c000 {
            label = "storage";
            reg = <0x0006c000 0x00008000>;
        };

        boot_partition: partition@74000 {
            label = "adafruit_boot";
            reg = <0x00074000 0x0000c000>;
        };
    };
};



&adc {
    // Battery Sensing
    channel@3 {
        zephyr,input-positive = <NRF_SAADC_AIN0>; /* P0.05 */
    };

    // EC Read
    channel@1 {
        zephyr,input-positive = <NRF_SAADC_AIN7>; /* P0.28 */
    };
};

/* set up I2C gpio pins */
&i2c0 {
    status = "okay";
    compatible = "nordic,nrf-twim";
	pinctrl-0 = <&i2c0_default>;
    pinctrl-names = "default";
	clock-frequency = <100000>;
    zaat_sensor: zaat@53 {           // device node
        compatible = "zmk,adxl345";  // Must match driver
        reg = <0x53>;                // I2C address
    };
};

/* disable I2C internal pull up resistor */
&pinctrl {
    i2c0_default: i2c0_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 30)>,
                    <NRF_PSEL(TWIM_SCL, 0, 31)>;
        };
    };
};

/* enable gpio port to fix undefined reference issue */
&gpiote {
	status = "okay";
};
/* enable gpio port 0 */
&gpio0 {
	status = "okay";
};
/* enable gpio port 1 */
&gpio1 {
	status = "okay";
};

&power {
    dcdcen0 = <1>; // Enable DC-DC
    regout0-voltage = <3>; // 3 = 3.3V (check Zephyr headers)
};

/*
&flash0 {
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		sd_partition: partition@0 {
			label = "mbr";
			reg = <0x00000000 0x00001000>;
		};
		code_partition: partition@1000 {
			label = "code_partition";
			reg = <0x00001000 0x000d3000>;
		};

		storage_partition: partition@d4000 {
			label = "storage";
			reg = <0x000d4000 0x00020000>;
		};

		boot_partition: partition@f4000 {
			label = "adafruit_boot";
			reg = <0x000f4000 0x0000c000>;
		};
	};
};

*/